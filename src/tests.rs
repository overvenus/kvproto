// This file is generated by rust-protobuf 2.1.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct TT {
    // message fields
    pub s: ::std::string::String,
    pub b: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    cached_size: ::protobuf::CachedSize,
}

impl TT {
    pub fn new() -> TT {
        ::std::default::Default::default()
    }

    // string s = 1;

    pub fn clear_s(&mut self) {
        self.s.clear();
    }

    // Param is passed by value, moved
    pub fn set_s(&mut self, v: ::std::string::String) {
        self.s = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_s(&mut self) -> &mut ::std::string::String {
        &mut self.s
    }

    // Take field
    pub fn take_s(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.s, ::std::string::String::new())
    }

    pub fn get_s(&self) -> &str {
        &self.s
    }

    // bytes b = 2;

    pub fn clear_b(&mut self) {
        self.b.clear();
    }

    // Param is passed by value, moved
    pub fn set_b(&mut self, v: ::std::vec::Vec<u8>) {
        self.b = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_b(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.b
    }

    // Take field
    pub fn take_b(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.b, ::std::vec::Vec::new())
    }

    pub fn get_b(&self) -> &[u8] {
        &self.b
    }
}

impl ::protobuf::Message for TT {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.s)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.b)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.s.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.s);
        }
        if !self.b.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.b);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.s.is_empty() {
            os.write_string(1, &self.s)?;
        }
        if !self.b.is_empty() {
            os.write_bytes(2, &self.b)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TT {
        TT::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "s",
                    |m: &TT| { &m.s },
                    |m: &mut TT| { &mut m.s },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "b",
                    |m: &TT| { &m.b },
                    |m: &mut TT| { &mut m.b },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TT>(
                    "TT",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TT {
        static mut instance: ::protobuf::lazy::Lazy<TT> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TT,
        };
        unsafe {
            instance.get(TT::new)
        }
    }
}

impl ::protobuf::Clear for TT {
    fn clear(&mut self) {
        self.clear_s();
        self.clear_b();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TT {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0btests.proto\x12\x0bcoprocessor\x1a\x0frustproto.proto\"\x20\n\x02T\
    T\x12\x0c\n\x01s\x18\x01\x20\x01(\tR\x01s\x12\x0c\n\x01b\x18\x02\x20\x01\
    (\x0cR\x01bB\x04\xb0\xa8\x08\x01J\x9d\x02\n\x06\x12\x04\0\0\n\x01\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08\x13\n\t\n\x02\
    \x03\0\x12\x03\x03\x07\x18\n\x08\n\x01\x08\x12\x03\x05\0+\n\x0b\n\x04\
    \x08\xe7\x07\0\x12\x03\x05\0+\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x05\
    \x07#\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x05\x07#\n\x0e\n\x07\x08\xe7\
    \x07\0\x02\0\x01\x12\x03\x05\x08\"\n\x0c\n\x05\x08\xe7\x07\0\x03\x12\x03\
    \x05&*\n\n\n\x02\x04\0\x12\x04\x07\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x07\x08\n\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x04\x11\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x08\x04\x07\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x08\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\x0b\x0c\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x08\x0f\x10\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\
    \x04\x10\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\t\x04\x08\x11\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\t\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \t\n\x0b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\x0e\x0fb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_serde() {
        let msg =  TT {
            b: vec![7;9],
            s: "boom!".to_owned(),
            .. Default::default()
        };

        println!("{}", serde_json::to_string(&msg).unwrap());
    }
}
